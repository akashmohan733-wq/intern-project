# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wjt8XFE2YhtnKIPT1gGMuu1pKh-MNMGl
"""


# ==========================================
# 🏠 HOUSE PRICE PREDICTION APP (Colab – INR + Lakhs)
# ==========================================

import pandas as pd, numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from pyngrok import ngrok
import streamlit as st

# ---------------- Streamlit code ----------------
code = r'''
import pandas as pd, numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
import streamlit as st

@st.cache_data
def load_data():
    return pd.read_csv("/content/housing_price_dataset.csv")

df = load_data()
st.title("🏡 House Price Prediction (Random Forest + House Age)")
st.write("Predict house prices in ₹ Lakhs using Random Forest!")

# ---- Clean & Prepare ----
df = df[df["Price"] > 0].dropna(subset=["Price"]).reset_index(drop=True)

# 💰 Convert price from thousands to lakhs
df["Price"] = df["Price"] / 100

# Add HouseAge and drop YearBuilt
df["HouseAge"] = 2025 - df["YearBuilt"]
df = df.drop(columns=["YearBuilt"])

# Encode Neighborhood
encoder = OneHotEncoder(drop="first", sparse_output=False)
encoded = encoder.fit_transform(df[["Neighborhood"]])
encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out(["Neighborhood"]))
df_encoded = pd.concat([df.drop(columns=["Neighborhood"]), encoded_df], axis=1)

# ---- Split & Train ----
X = df_encoded.drop(columns=["Price"])
y = df_encoded["Price"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Pipeline([
    ("imputer", SimpleImputer(strategy="median")),
    ("regressor", RandomForestRegressor(n_estimators=50, random_state=42))
])
model.fit(X_train, y_train)

# ---- Evaluate ----
y_pred = model.predict(X_test)
mae, rmse = mean_absolute_error(y_test, y_pred), np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

st.subheader("📊 Model Performance (in Lakhs ₹)")
st.write(f"MAE: ₹ {mae:.1f} lakh")
st.write(f"RMSE: ₹ {rmse:.1f} lakh")
st.write(f"R² Score: {r2:.1f}")

# ---- Prediction UI ----
st.subheader("🧮 Predict Your Own House Price (in Lakhs ₹)")

sqft = st.number_input("Square Feet", 500, 10000, 1500)
bed  = st.number_input("Bedrooms", 1, 10, 3)
bath = st.number_input("Bathrooms", 1, 10, 2)
year = st.slider("Year Built", 1900, 2025, 2015)
neigh = st.selectbox("Neighborhood", encoder.categories_[0])

age = 2025 - year
inp = pd.DataFrame({
    "SquareFeet":[sqft],
    "Bedrooms":[bed],
    "Bathrooms":[bath],
    "HouseAge":[age],
    "Neighborhood":[neigh]
})

enc_inp = encoder.transform(inp[["Neighborhood"]])
enc_inp_df = pd.DataFrame(enc_inp, columns=encoder.get_feature_names_out(["Neighborhood"]))
final_inp = pd.concat([inp.drop(columns=["Neighborhood"]), enc_inp_df], axis=1)
for c in set(X.columns) - set(final_inp.columns): final_inp[c] = 0
final_inp = final_inp[X.columns]

# ---- Predict ----
if st.button("Predict Price"):
    # Multiply by 10 to scale up (add one zero)
    pred = model.predict(final_inp)[0] * 10
    formatted_price = f"₹ {pred:,.2f} lakh"
    st.success(f"💰 Predicted House Price: {formatted_price}")

'''

# Save Streamlit app file
with open("app.py", "w") as f:
    f.write(code)

# ---- Start Streamlit via ngrok ----
import time

ngrok.kill()  # close any old tunnels
streamlit run app.py &>/dev/null &  # start streamlit quietly

# Wait a bit for Streamlit to open port 8501
time.sleep(5)

# Now start ngrok tunnel
public_url = ngrok.connect(8501)
print("🔗 Your Streamlit app is live here:", public_url)
